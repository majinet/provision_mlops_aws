# An example of ClusterConfig object using an existing VPC:
--- 
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eks-cluster
  region: us-east-1
  version: "1.27"

privateCluster:
  enabled: false
#  additionalEndpointServices:
    # For Cluster Autoscaler
#    - "autoscaling"
    # CloudWatch logging
#    - "logs"
    # Cloudformation
#    - "cloudformation"

availabilityZones: ["us-east-1d",  "us-east-1f"]

addons:
  - name: vpc-cni # no version is specified so it deploys the default version
    version: latest
    attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
  - name: coredns
    version: latest # auto discovers the latest available
  - name: kube-proxy
    version: latest
  - name: aws-ebs-csi-driver
    wellKnownPolicies:      # add IAM and service account
      ebsCSIController: true

iam:
  serviceRoleARN: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/eksClusterRole"
  #fargatePodExecutionRoleARN: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/AmazonEKSFargatePodExecutionRole"
  withOIDC: true

vpc:
  #id: ${VPC_ID} # (optional, must match VPC ID used for each subnet below)
  cidr: "192.168.0.0/16"       # (optional, must match CIDR used by the given VPC)
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  #subnets:
    # must provide 'private' and/or 'public' subnets by availability zone as shown
  #  private:
  #    us-east-1d:
  #      id: ${SUBNET_IDS_2}
  #    us-east-1f:
  #      id: ${SUBNET_IDS_3}