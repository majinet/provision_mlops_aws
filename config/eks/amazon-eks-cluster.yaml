# An example of ClusterConfig object using an existing VPC:
--- 
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eks-cluster
  region: us-east-1
  version: "1.25"

privateCluster:
  enabled: false
#  additionalEndpointServices:
    # For Cluster Autoscaler
#    - "autoscaling"
    # CloudWatch logging
#    - "logs"
    # Cloudformation
#    - "cloudformation"

availabilityZones: ["us-east-1c", "us-east-1f",  "us-east-1d"]

addons:
  - name: vpc-cni # no version is specified so it deploys the default version
    version: latest
    attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
  - name: coredns
    version: latest # auto discovers the latest available
  - name: kube-proxy
    version: latest
#  - name: aws-ebs-csi-driver
#    wellKnownPolicies:      # add IAM and service account
#      ebsCSIController: true

iam:
  serviceRoleARN: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/eksClusterRole"
  #fargatePodExecutionRoleARN: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/AmazonEKSFargatePodExecutionRole"
  withOIDC: true
  serviceAccounts:
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: ebs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: efs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        efsCSIController: true
    - metadata:
        name: cert-manager
        namespace: cert-manager
      wellKnownPolicies:
        certManager: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
        labels: { aws-usage: "cluster-ops" }
      wellKnownPolicies:
        autoScaler: true
    - metadata:
        name: build-service
        namespace: ci-cd
      wellKnownPolicies:
        imageBuilder: true
    - metadata:
        name: autoscaler-service
        namespace: kube-system
      attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:DescribeTags"
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: '*'

vpc:
  #id: ${VPC_ID} # (optional, must match VPC ID used for each subnet below)
  cidr: "192.168.0.0/16"       # (optional, must match CIDR used by the given VPC)
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  #subnets:
    # must provide 'private' and/or 'public' subnets by availability zone as shown
  #  private:
  #    us-east-1d:
  #      id: ${SUBNET_IDS_2}
  #    us-east-1f:
  #      id: ${SUBNET_IDS_3}