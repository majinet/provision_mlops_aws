name: Step 2.5 - Setup Calico network

on:
  workflow_dispatch:
  #workflow_run:
  #  workflows: [ "Step 1 - Provisioning AWS EKS with default VPC" ]
  #  branches: [ main ]
  #  types:
  #    - completed

env:
  AWS_REGION : us-east-1 #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: eks-cluster

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  calico_aws:
    name: Setup Calico network
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/KubeAdmin
          role-session-name: KubeAdmin
          aws-region: ${{ env.AWS_REGION}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      - name: Health Check Cluster
        id: health-check-eks
        run: |
          aws eks update-kubeconfig --name ${{env.CLUSTER_NAME}} --region ${{env.AWS_REGION}}
          kubectl config get-contexts
      #- name: disable AWS VPC networking for pods.
      #  run: |
      #    kubectl delete daemonset -n kube-system aws-node
      - name: install Calico Operator
        run: |
          # namespace tigera-operator is created in step 2
          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/tigera-operator.yaml --namespace tigera-operator
      - name: configure installation
        run: |
          kubectl apply -f config/operator/calico.yaml
      - name: Sleep for 1 mins
        uses: whatnick/wait-action@master
        with:
          time: '60s'
      - name: Configure Calico for eks
        run: |
          # Apply the updated permissions to your cluster
          kubectl apply -f <(cat <(kubectl get clusterrole aws-node -o yaml) config/eks/append-clusterrole-aws-node.yaml)
          
          # Set the environment variable for the plugin
          kubectl set env daemonset aws-node -n kube-system ANNOTATE_POD_IP=true
          
          # Delete the calico-kube-controllers
          kubectl delete pod -l app=calico-kube-controllers -n calico-system
      #- name: Sleep for 1 mins
      #  uses: whatnick/wait-action@master
      #  with:
      #    time: '60s'
      #- name: health check
      #  run: |
      #    # Confirm that the vpc.amazonaws.com/pod-ips annotation is added to the new calico-kube-controllers Pod
      #    kubectl describe pod -l app=calico-kube-controllers -n calico-system | grep vpc.amazonaws.com/pod-ips
