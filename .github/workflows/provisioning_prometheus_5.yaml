name: Step 5.3 Provisioning Prometheus

on:
  workflow_dispatch:
  #workflow_run:
  #  workflows: [ "Step 1 - Provisioning AWS EKS with default VPC" ]
  #  branches: [ main ]
  #  types:
  #    - completed

env:
  AWS_REGION : us-east-1 #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: eks-cluster

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  amp_aws:
    name: Provisioning Prometheus
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main
      - name: Checkout awslabs kubeflow-manifests
        uses: actions/checkout@v3
        with:
          repository: awslabs/kubeflow-manifests
          ref: v1.7.0-aws-b1.0.2
          path: kubeflow-manifests
      - name: Checkout kubeflow
        uses: actions/checkout@v3
        with:
          repository: kubeflow/manifests
          ref: v1.7.0
          path: upstream
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/KubeAdmin
          role-session-name: kubedmin
          aws-region: ${{ env.AWS_REGION}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      - name: Health Check Cluster
        id: health-check-eks
        run: |
          aws eks update-kubeconfig --name ${{env.CLUSTER_NAME}} --region ${{env.AWS_REGION}}
          kubectl config get-contexts
      - name: Check CloudFormation stack existence (eks-prometheus)
        id: check-stack-eks-prometheus
        run: |
          if aws cloudformation describe-stacks --stack-name eks-prometheus >/dev/null 2>&1; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
      - name: deploy Prometheus
        if: steps.check-stack-eks-prometheus.outputs.exists == 'false'
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: eks-vpc
          template: cloudformation/eks-prometheus-template.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            KubeClusterName=${{env.CLUSTER_NAME}},
            Namespace=prometheus