name: Step 0.1 - Manage IAM roles

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: 'eks-cluster'
  ACK_K8S_NAMESPACE: "ack-system-k8s"

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Manage IAM role
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Checkout awslabs kubeflow-manifests
        uses: actions/checkout@v3
        with:
          repository: awslabs/kubeflow-manifests
          ref: v1.7.0-aws-b1.0.2
          path: kubeflow-manifests
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/iamAdmin
          role-session-name: iamAdmin
          aws-region: ${{ github.event.inputs.region}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      - name: Check if role exists (eksClusterRole)
        id: check-cluster-role
        run: |
          aws iam get-role --role-name eksClusterRole > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create cluster role for step 1
        id: create-iam-cluster-role
        if: steps.check-cluster-role.outputs.exists == 'false'
        run: |
          aws iam create-role \
            --role-name eksClusterRole \
            --assume-role-policy-document file://"config/eks/cluster-trust-policy.json"
          
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy \
            --role-name eksClusterRole
      - name: Check if role exists (AmazonEKSNodeRole)
        id: check-node-role
        run: |
          aws iam get-role --role-name AmazonEKSNodeRole > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create node role for step 2
        id: create-iam-node-role
        if: steps.check-node-role.outputs.exists == 'false'
        run: |
          aws iam create-role \
            --role-name AmazonEKSNodeRole \
            --assume-role-policy-document file://"config/eks/node-role-trust-relationship.json"

          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy \
            --role-name AmazonEKSNodeRole
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
            --role-name AmazonEKSNodeRole
      - name: Check if role exists (KubeAdmin)
        id: check-role-KubeAdmin
        run: |
          aws iam get-role --role-name KubeAdmin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use KubeAdmin role
        if: steps.check-role-KubeAdmin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name KubeAdmin --assume-role-policy-document "file://account-trust-policy.json"
          
          aws iam attach-role-policy --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess --role-name KubeAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --role-name KubeAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly --role-name KubeAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name KubeAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --role-name KubeAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly --role-name KubeAdmin
          
          #cat config/iam/inline_policy/iamPassRolePolicy.json | envsubst  > iamPassRolePolicy.json
          #aws iam put-role-policy --role-name KubeAdmin --policy-name my-inline-policy --policy-document file://iamPassRolePolicy.json
      - name: Check if role exists (NetworkAdmin)
        id: check-role-NetworkAdmin
        run: |
          aws iam get-role --role-name NetworkAdmin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use NetworkAdmin role
        if: steps.check-role-NetworkAdmin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name NetworkAdmin --assume-role-policy-document "file://account-trust-policy.json"
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name NetworkAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --role-name NetworkAdmin
      - name: Check if role exists (AckAdmin)
        id: check-role-AckAdmin
        run: |
          aws iam get-role --role-name AckAdmin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use AckAdmin role
        if: steps.check-role-AckAdmin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name AckAdmin --assume-role-policy-document "file://account-trust-policy.json"
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly --role-name AckAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess --role-name AckAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name AckAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/IAMReadOnlyAccess --role-name AckAdmin
      - name: Check if role exists (RdsAdmin)
        id: check-role-RdsAdmin
        run: |
          aws iam get-role --role-name RdsAdmin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use RdsAdmin role
        if: steps.check-role-RdsAdmin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name RdsAdmin --assume-role-policy-document "file://account-trust-policy.json"
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly --role-name RdsAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess --role-name RdsAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --role-name RdsAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name RdsAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonRDSFullAccess --role-name RdsAdmin
      - name: Check if role exists (S3Admin)
        id: check-role-S3Admin
        run: |
          aws iam get-role --role-name S3Admin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use S3Admin role
        if: steps.check-role-S3Admin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name S3Admin --assume-role-policy-document "file://account-trust-policy.json"
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly --role-name S3Admin
          aws iam attach-role-policy --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess --role-name S3Admin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name S3Admin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --role-name S3Admin
      - name: Check if role exists (EFSAdmin)
        id: check-role-EFSAdmin
        run: |
          aws iam get-role --role-name EFSAdmin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use EFSAdmin role
        if: steps.check-role-EFSAdmin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name EFSAdmin --assume-role-policy-document "file://account-trust-policy.json"
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly --role-name EFSAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess --role-name EFSAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name EFSAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess --role-name EFSAdmin
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --role-name EFSAdmin
      - name: Check if role exists (DeployKubeflow)
        id: check-role-DeployKubeflow
        run: |
          aws iam get-role --role-name DeployKubeflow > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use DeployKubeflow role
        if: steps.check-role-DeployKubeflow.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role --role-name DeployKubeflow --assume-role-policy-document "file://account-trust-policy.json"
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly --role-name DeployKubeflow
          aws iam attach-role-policy --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess --role-name DeployKubeflow
          aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess --role-name DeployKubeflow
          
