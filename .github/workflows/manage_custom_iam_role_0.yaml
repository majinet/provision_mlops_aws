name: Step 3 - Manage IAM roles

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: 'eks-cluster'
  ACK_K8S_NAMESPACE: "ack-system-k8s"

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Manage IAM role
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/iamAdmin
          role-session-name: iamAdmin
          aws-region: ${{ github.event.inputs.region}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      - name: health check
        run: |
          aws eks update-kubeconfig --region us-east-1 --name eks-cluster
      - name: set oidc provider
        id: set-oidc-provider
        run: |
          # Update the service name variables as needed
          OIDC_PROVIDER=$(aws eks describe-cluster --name ${{env.CLUSTER_NAME}} --region ${{env.AWS_REGION}} --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\/\///")
          echo "OIDC_PROVIDER: $OIDC_PROVIDER"
          echo "OIDC_PROVIDER=$OIDC_PROVIDER" >> $GITHUB_ENV
      - name: Check if role exists (KubeAdmin)
        id: check-role-KubeAdmin
        run: |
          aws iam get-role --role-name KubeAdmin > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create user to use KubeAdmin role
        if: steps.check-role-KubeAdmin.outputs.exists == 'false'
        run: |
          cat config/iam/trust/account-trust-policy.json | envsubst  > account-trust-policy.json
          
          aws iam create-role \
            --role-name KubeAdmin \
            --assume-role-policy-document "file://account-trust-policy.json"
          
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/EKSClusterFullAccess \
            --role-name KubeAdmin
          
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/KubeAdmin --username kubeadmin --group system:masters \
            --no-duplicate-arns
          
          # in terminal,
          # aws configure sso (do once)
          # aws sso login --sso-session majinet
          # aws sts assume-role --role-arn arn:aws:iam::<aws_account_id>:role/KubeAdmin --role-session-name KubeAdmin --profile AdministratorAccess-${{secrets.AWS_ACCOUNT_ID}}
          # aws configure --profile kubeadmin set aws_access_key_id 
          # aws configure --profile kubeadmin set aws_secret_access_key 
          # aws configure --profile kubeadmin set aws_session_token
      - name: Check if role exists (eksClusterRole)
        id: check-cluster-role
        run: |
          aws iam get-role --role-name eksClusterRole > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create cluster role for step 1
        id: create-iam-cluster-role
        if: steps.check-cluster-role.outputs.exists == 'false'
        run: |
          aws iam create-role \
            --role-name eksClusterRole \
            --assume-role-policy-document file://"config/eks/cluster-trust-policy.json"
          
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy \
            --role-name eksClusterRole
      - name: Check if role exists (AmazonEKSNodeRole)
        id: check-node-role
        run: |
          aws iam get-role --role-name AmazonEKSNodeRole > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create node role for step 2
        id: create-iam-node-role
        if: steps.check-node-role.outputs.exists == 'false'
        run: |
          aws iam create-role \
            --role-name AmazonEKSNodeRole \
            --assume-role-policy-document file://"config/eks/node-role-trust-relationship.json"

          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy \
            --role-name AmazonEKSNodeRole
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
            --role-name AmazonEKSNodeRole
      - name: Check if role exists (ack-rds-controller)
        id: check-role-rds
        run: |
          aws iam get-role --role-name ack-rds-controller > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: Create an IAM role and policy for service account (rds) - step 4
        id: create-iam-role-rds
        if: steps.check-role-rds.outputs.exists == 'false'
        run: |
          # Update the service name variables as needed
          SERVICE=rds
          AWS_ACCOUNT_ID=${{secrets.AWS_ACCOUNT_ID}}
          ACK_K8S_NAMESPACE=${{env.ACK_K8S_NAMESPACE}}

          ACK_K8S_SERVICE_ACCOUNT_NAME=ack-${SERVICE}-controller
          
          cat config/ack/controller/ack_rds_trust.json | envsubst > ack_rds_trust.json
          cat ack_rds_trust.json

          ACK_CONTROLLER_IAM_ROLE="ack-${SERVICE}-controller"
          ACK_CONTROLLER_IAM_ROLE_DESCRIPTION="IRSA role for ACK ${SERVICE} controller deployment on EKS cluster using Helm charts"
          aws iam create-role --role-name "${ACK_CONTROLLER_IAM_ROLE}" --assume-role-policy-document file://ack_rds_trust.json --description "${ACK_CONTROLLER_IAM_ROLE_DESCRIPTION}"
          
          # Download the recommended managed and inline policies and apply them to the
          # newly created IRSA role
          BASE_URL=https://raw.githubusercontent.com/aws-controllers-k8s/${SERVICE}-controller/main
          POLICY_ARN_URL=${BASE_URL}/config/iam/recommended-policy-arn
          POLICY_ARN_STRINGS="$(wget -qO- ${POLICY_ARN_URL})"
          
          echo "POLICY_ARN_STRINGS: $POLICY_ARN_STRINGS"

          while IFS= read -r POLICY_ARN; do
              echo -n "Attaching $POLICY_ARN ... "
              aws iam attach-role-policy \
                  --role-name "${ACK_CONTROLLER_IAM_ROLE}" \
                  --policy-arn "${POLICY_ARN}"
              echo "ok."
          done <<< "$POLICY_ARN_STRINGS"
      - name: Check if role exists (ack-s3-controller)
        id: check-role-s3
        run: |
          aws iam get-role --role-name ack-s3-controller > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: Create an IAM role and policy for service account (s3) - step 4
        id: create-iam-role-s3
        if: steps.check-role-s3.outputs.exists == 'false'
        run: |
          SERVICE=s3
          
          cat config/ack/controller/ack_s3_trust.json | envsubst > ack_s3_trust.json
          cat ack_s3_trust.json

          ACK_CONTROLLER_IAM_ROLE="ack-${SERVICE}-controller"
          ACK_CONTROLLER_IAM_ROLE_DESCRIPTION="IRSA role for ACK ${SERVICE} controller deployment on EKS cluster using Helm charts"
          
          echo "ACK_CONTROLLER_IAM_ROLE: $ACK_CONTROLLER_IAM_ROLE"
          echo "ACK_CONTROLLER_IAM_ROLE_DESCRIPTION: $ACK_CONTROLLER_IAM_ROLE_DESCRIPTION"
          
          aws iam create-role --role-name "${ACK_CONTROLLER_IAM_ROLE}" --assume-role-policy-document file://ack_s3_trust.json --description "${ACK_CONTROLLER_IAM_ROLE_DESCRIPTION}"
          
          # Download the recommended managed and inline policies and apply them to the
          # newly created IRSA role
          BASE_URL=https://raw.githubusercontent.com/aws-controllers-k8s/${SERVICE}-controller/main
          POLICY_ARN_URL=${BASE_URL}/config/iam/recommended-policy-arn
          POLICY_ARN_STRINGS="$(wget -qO- ${POLICY_ARN_URL})"
          
          echo "POLICY_ARN_STRINGS: $POLICY_ARN_STRINGS"

          while IFS= read -r POLICY_ARN; do
              echo -n "Attaching $POLICY_ARN ... "
              aws iam attach-role-policy \
                  --role-name "${ACK_CONTROLLER_IAM_ROLE}" \
                  --policy-arn "${POLICY_ARN}"
              echo "ok."
          done <<< "$POLICY_ARN_STRINGS"
