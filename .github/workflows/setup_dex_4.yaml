name: Step 4.3 - Provisioning dex

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  OIDC_GITHUB_CLIENT_SECRET: ${{ secrets.OIDC_GITHUB_CLIENT_SECRET}}
  OIDC_GITHUB_CLIENT_ID: ${{ secrets.OIDC_GITHUB_CLIENT_ID}}
  CLUSTER_NAME: eks-cluster

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Provisioning dex
    runs-on: ubuntu-20.04
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main
      - name: Checkout awslabs kubeflow-manifests
        uses: actions/checkout@v3
        with:
          repository: awslabs/kubeflow-manifests
          ref: v1.7.0-aws-b1.0.2
          path: kubeflow-manifests
      - name: Checkout kubeflow
        uses: actions/checkout@v3
        with:
          repository: kubeflow/manifests
          ref: v1.7.0
          path: upstream
      - name: Checkout ForgeRock
        uses: actions/checkout@v3
        with:
          repository: ForgeRock/forgeops
          ref: release/7.3-20230706
          path: forgeops
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/KubeAdmin
          role-session-name: deploykubeflow
          aws-region: ${{ github.event.inputs.region}}
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm
      - name: health check eks
        run: |
          aws eks update-kubeconfig --region us-east-1 --name eks-cluster
      - name: apply cluster issuer
        run: |
          kubectl apply -f main/config/eks/k8s-clusterissuer.yaml
      - name: Check Pod with Label (dex)
        id: check-dex
        run: |
          POD_COUNT=$(kubectl get pods -n dex -l app.kubernetes.io/name=dex --no-headers=true | wc -l)
          if [[ "$POD_COUNT" -gt 0 ]]; then
            echo "Pod with label exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Pod with label does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: deploy dex
        if: steps.check-dex.outputs.exists == 'false'
        run: |
          helm repo add dex https://charts.dexidp.io
          helm repo update
          cat main/helm/charts/dex/dex.yaml | envsubst  > dex.yaml
          cat dex.yaml
          
          helm install dex dex/dex --namespace dex --create-namespace --values dex.yaml
      - name: get eks endpoint
        run: |
          eks_endpoint=$(aws eks describe-cluster --name eks-cluster --query "cluster.endpoint" --output text)
          
          echo "EKS_ENDPOINT: $eks_endpoint"
          echo "EKS_ENDPOINT=$eks_endpoint" >> $GITHUB_ENV
      - name: Check Pod with Label (dex-k8s-authenticator)
        id: check-dex-k8s-authenticator
        run: |
          POD_COUNT=$(kubectl get pods -n dex -l app.kubernetes.io/name=dex-k8s-authenticator --no-headers=true | wc -l)
          if [[ "$POD_COUNT" -gt 0 ]]; then
            echo "Pod with label exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Pod with label does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: deploy dex-k8s-authenticator
        if: steps.check-dex-k8s-authenticator.outputs.exists == 'false'
        run: |
          client_cert=$(aws eks describe-cluster --name ${{env.CLUSTER_NAME}} --query 'cluster.certificateAuthority' --region ${{env.AWS_REGION}} --output text | base64 -d)
          
          text=$client_cert

          result=$(echo "$text" | sed 's/^/        /')
          echo "$result"

          export CLIENT_CERT=$result
          cat main/helm/charts/dex-k8s-authenticator/dex-k8s-authenticator.yaml | envsubst  > dex-k8s-authenticator.yaml
          cat dex-k8s-authenticator.yaml
          
          helm repo add skm https://charts.sagikazarmark.dev
          helm repo update
          
          helm install dex-k8s-authenticator skm/dex-k8s-authenticator --namespace dex --values dex-k8s-authenticator.yaml
      - name: apply clusterrolebinding
        run: |
          kubectl apply -f main/config/eks/clusterrolebinding/dex-k8s-clusterrolebinding.yaml
      #- name: apply ingress for dex
      #  run: |
      #    kubectl apply -f main/config/dex/dex_ingress.yaml
