name: Step 2.0 - Provisioning AWS EKS with default VPC

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Provisioning AWS EKS
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/KubeAdmin
          role-session-name: KubeAdmin
          aws-region: ${{ github.event.inputs.region}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      - name: Set VPC ID
        id: set-vpc-id
        run: |
          VPC_ID=$(aws cloudformation describe-stacks --stack-name eks-vpc --query 'Stacks[0].Outputs[?OutputKey==`VpcId`].OutputValue' --output text)
          echo "VPC ID: $VPC_ID"
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
      - name: Get Public Subnet IDs
        run: |
          subnetIds=$(aws cloudformation describe-stacks --stack-name eks-vpc --query 'Stacks[0].Outputs[?OutputKey==`PublicSubnetIds`].OutputValue' --output text)
          echo "subnetIds=$subnetIds"
          IFS=", " read -r var1 var2 <<< "$subnetIds"
          echo "EKS_PUBLIC_SUBNET_ID_1=$var1" >> $GITHUB_ENV
          echo "EKS_PUBLIC_SUBNET_ID_2=$var2" >> $GITHUB_ENV
      - name: Get Private Subnet IDs
        run: |
          subnetIds=$(aws cloudformation describe-stacks --stack-name eks-vpc --query 'Stacks[0].Outputs[?OutputKey==`PrivateSubnetIds`].OutputValue' --output text)
          echo "subnetIds=$subnetIds"
          IFS=", " read -r var1 var2 <<< "$subnetIds"
          echo "EKS_PRIVATE_SUBNET_ID_1=$var1" >> $GITHUB_ENV
          echo "EKS_PRIVATE_SUBNET_ID_2=$var2" >> $GITHUB_ENV
      - name: create eks cluster
        id: create-eks-cluster
        run: | 
          cat config/eks/amazon-eks-cluster.yaml | envsubst  > amazon-eks-cluster.yaml
          cat amazon-eks-cluster.yaml
          eksctl create cluster -f amazon-eks-cluster.yaml
          kubectl get svc
      - name: create namespace (kubeflow-aws)
        run: |
          kubectl create ns "kubeflow-aws"
        continue-on-error: true
      - name: create namespace (kubeflow)
        run: |
          kubectl create ns "kubeflow"
        continue-on-error: true
      - name: create namespace (appmesh-system)
        run: |
          kubectl create ns "appmesh-system"
      - name: deploy metric server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
      - name: Enable the parameter to assign prefixes to network interfaces for the Amazon VPC CNI DaemonSet
        run: |
          kubectl set env daemonset aws-node -n kube-system ENABLE_PREFIX_DELEGATION=true
      - name: create idp mapping in eks
        run: |
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/iamAdmin --username iamadmin \
            --no-duplicate-arns
          
          kubectl apply -f config/eks/clusterrole/iamadmin-cluster-role.yaml
          kubectl apply -f config/eks/clusterrolebinding/iamadmin-cluster-role-binding.yaml
          
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/deployKubeflow --username deploykubeflow --group system:masters \
            --no-duplicate-arns
          
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/AckAdmin --username ackadmin --group system:authenticated \
            --no-duplicate-arns
          
          kubectl apply -f config/eks/clusterrole/ackadmin-cluster-role.yaml
          kubectl apply -f config/eks/clusterrolebinding/ackadmin-cluster-role-binding.yaml
          kubectl apply -f config/eks/clusterrolebinding/ackadmin-cluster-role-binding-edit.yaml
          
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/RdsAdmin --username rdsadmin --group system:masters \
            --no-duplicate-arns
          
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/S3Admin --username s3admin --group system:masters \
            --no-duplicate-arns
          
          eksctl create iamidentitymapping --cluster eks-cluster --region=${{env.AWS_REGION}} \
            --arn arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/EFSAdmin --username efsadmin --group system:masters \
            --no-duplicate-arns
          
          # in terminal,
          # aws configure sso (do once)
          # aws sso login --sso-session majinet
          # aws sts assume-role --role-arn arn:aws:iam::<aws_account_id>:role/KubeAdmin --role-session-name KubeAdmin --profile AdministratorAccess-${{secrets.AWS_ACCOUNT_ID}}
          # aws configure --profile kubeadmin set aws_access_key_id 
          # aws configure --profile kubeadmin set aws_secret_access_key 
          # aws configure --profile kubeadmin set aws_session_token


