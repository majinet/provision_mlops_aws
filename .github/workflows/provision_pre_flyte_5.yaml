name: Step 5 - Provisioning Flyte Pre-requisites

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Provisioning AWS EKS
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.IAC_EKS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAC_EKS_SECRET_KEY }}
          aws-region: ${{ github.event.inputs.region}}
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install helm
        id: install-helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update -y
          sudo apt-get install helm -y
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: Check if IAM Cluster role exists
        id: check-cluster-role
        run: |
          aws iam get-role --role-name eksClusterRole > /dev/null 2>&1 || echo "::set-output name=role_exists::false"
      - name: Create IAM role for Cluster
        id: create-iam-role-for-cluster
        if: steps.check-cluster-role.outputs.role_exists == 'false'
        run: |
          aws iam create-role \
            --role-name eksClusterRole \
            --assume-role-policy-document file://"config/eks/cluster-trust-policy.json"
          
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy \
            --role-name eksClusterRole
      - name: Check if EKS Node IAM role exists
        id: check-node-role
        run: |
          aws iam get-role --role-name AmazonEKSNodeRole > /dev/null 2>&1 || echo "::set-output name=role_exists::false"
      - name: Create IAM role for Node
        id: create-iam-role-for-node
        if: steps.check-node-role.outputs.role_exists == 'false'
        run: |
          aws iam create-role \
            --role-name AmazonEKSNodeRole \
            --assume-role-policy-document file://"config/eks/node-role-trust-relationship.json"

          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy \
            --role-name AmazonEKSNodeRole
          
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
            --role-name AmazonEKSNodeRole
      - name: Get ARN of ODIC provider
        id: get-oidc-provider-arn
        run: |
          OIDC_PROVIDER_NAME=$(aws iam list-open-id-connect-providers --query 'OpenIDConnectProviderList[?contains(Arn, `oidc.eks.us-east-1.amazonaws.com`)].Arn' --output text)

          OIDC_PROVIDER_ARN=$(aws iam list-open-id-connect-providers --query 'OpenIDConnectProviderList[?Arn==`arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/$OIDC_PROVIDER_NAME`].Arn' --output text)
          echo "OIDC_PROVIDER_ARN: $OIDC_PROVIDER_ARN"
          echo "OIDC_PROVIDER_ARN=$OIDC_PROVIDER_ARN" >> $GITHUB_ENV
      - name: Trust between ODIC and Flyte
        id: trust-between-oidc-and-flyte
        run: |
      - name: Check if Flyte system IAM role exists
        id: check-flyte-system-role
        run: |
          aws iam get-role --role-name iam-role-flyte > /dev/null 2>&1 || echo "::set-output name=role_exists::false"
      - name: Create IAM role for Flyte system
        id: create-iam-role-for-flyte-system
        if: steps.check-flyte-system-role.outputs.role_exists == 'false'
        run: |
          cat config/flyte/odic-flyte-trust-policy.json | envsubst > odic-flyte-trust-policy.json
          cat odic-flyte-trust-policy.json
          
          aws iam create-role \
            --role-name iam-role-flyte \
            --assume-role-policy-document file://"odic-flyte-trust-policy.json"

          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess \
            --role-name iam-role-flyte
      - name: Check if Flyte user IAM role exists
        id: check-flyte-user-role
        run: |
          aws iam get-role --role-name flyte-user-role > /dev/null 2>&1 || echo "::set-output name=role_exists::false"
      - name: Create IAM role for Flyte user
        id: create-iam-role-for-flyte-user
        if: steps.check-flyte-user-role.outputs.role_exists == 'false'
        run: |
          cat config/flyte/odic-flyte-trust-policy.json | envsubst > odic-flyte-trust-policy.json
          cat odic-flyte-trust-policy.json
          
          aws iam create-role \
            --role-name flyte-user-role \
            --assume-role-policy-document file://"odic-flyte-trust-policy.json"

          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess \
            --role-name flyte-user-role
      - name: Set VPC ID
        id: set-vpc-id
        run: |
          VPC_ID=$(aws cloudformation describe-stacks --stack-name eksctl-eks-cluster-cluster --query 'Stacks[0].Outputs[?OutputKey==`VPC`].OutputValue' --output text)
          echo "VPC ID: $VPC_ID"
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
      - name: check aws elb policy if exists
        id: check-aws-elb-policy
        run: |
          if aws iam get-policy --policy-name AWSLoadBalancerControllerIAMPolicy --quiet 2>/dev/null; then
            echo "IAM policy exists"
            echo "::set-output name=policy_exists::true"
          else
            echo "IAM policy does not exist"
            echo "::set-output name=policy_exists::false"
          fi
      - name: skip if policy_exists is true, otherwise create aws elb policy
        id: create-aw-elb-policy
        if: steps.check-aws-elb-policy.outputs.policy_exists == 'true'
        run: |
          # Download the IAM policy for the AWS Load Balancer Controller
          curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.0/docs/install/iam_policy.json
          
          # Create an IAM policy called AWSLoadBalancerControllerIAMPolicy
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam-policy.json
          
          # Create an IAM role and ServiceAccount for the AWS Load Balancer controller
                    eksctl create iamserviceaccount \
                      --cluster=eks-cluster \
                      --region=${{env.AWS_REGION}} \
                      --namespace=kube-system \
                      --name=aws-load-balancer-controller \
                      --attach-policy-arn=arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:policy/AWSLoadBalancerControllerIAMPolicy \
                      --override-existing-serviceaccounts \
                      --approve
      - name: sign SSL Cert (https://docs.flyte.org/en/v1.0.0/deployment/aws/manual.html)
        id: sign-ssl-cert
        run: |
          echo "self-signed SSL Cert pre-generated"
          #certificate_arn=$(aws acm import-certificate --certificate fileb://config/certs/flyte/crt.out --private-key fileb://config/certs/flyte/key.out --region ${{env.AWS_REGION}})
          #echo "certificate_arn: $certificate_arn"
          #echo "certificate_arn=$certificate_arn" >> $GITHUB_ENV
      - name: create log group
        id: create-log-group
        run: |
          aws logs create-log-group --log-group-name flyteplatform
      - name: Create aws elb
        id: create-aws-elb
        run: |
          # Add the EKS chart repo to helm
          helm repo add eks https://aws.github.io/eks-charts
          
          aws eks update-kubeconfig --region us-east-1 --name eks-cluster
          
          # Install the TargetGroupBinding CRDs
          kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
          
          # Install the load balancer controller using helm
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=eks-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
          
          Verify load balancer webhook service is running in kube-system ns
          kubectl get service -n kube-system