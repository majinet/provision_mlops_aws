name: Step 2 - Provisioning AWS EKS Nodegroups

on:
  workflow_dispatch:
  #workflow_run:
  #  workflows: [ "Step 1 - Provisioning AWS EKS with default VPC" ]
  #  branches: [ main ]
  #  types:
  #    - completed

env:
  AWS_REGION : us-east-1 #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Provisioning AWS EKS Nodegroups
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/KubeAdmin
          role-session-name: KubeAdmin
          aws-region: ${{ env.AWS_REGION}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      #- name: delete coredns in worker nodes
      #  id: delete-coredns
      #  run: |
      #    kubectl patch deployment coredns -n kube-system --type json \
      #    -p='[{"op": "remove", "path": "/spec/template/metadata/annotations/eks.amazonaws.com~1compute-type"}]'
      - name: create managed node group
        id: create-managed-node-group
        run: |
          aws eks update-kubeconfig --region us-east-1 --name eks-cluster
          eksctl create nodegroup --config-file=config/eks/amazon-eks-managedNodeGroups.yaml
      - name: setup auto-scaler auto discovery
        run: |
          kubectl apply -f config/eks/cluster-autoscaler-autodiscover.yaml
      #- name: Sleep for 5 mins
      #  uses: whatnick/wait-action@master
      #  with:
      #    time: '300s'
      #- name: scale managed node group
      #  run: |
      #    eksctl scale nodegroup --name=on-demand --cluster=eks-cluster --nodes=1 --nodes-min=0 --nodes-max=5
      #- name: create fargate profile
      #  id: create-fargate-profile
      #  run: |
      #    cat config/fargate-eks-cluster.yaml | envsubst '${{ secrets.AWS_ACCOUNT_ID }}' > fargate-eks-cluster.yaml
      #    eksctl create fargateprofile -f fargate-eks-cluster.yaml