name: Step 2 - Provisioning AWS EKS Nodegroups

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  eks_aws:
    name: Provisioning AWS EKS Nodegroups
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.IAC_EKS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAC_EKS_SECRET_KEY }}
          aws-region: ${{ github.event.inputs.region}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: install eksctl
        id: install-eksctl
        run: |
          # for ARM systems, set ARCH to: `arm64`, `armv6` or `armv7`
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH

          curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
      - name: install kubectl
        id: install-kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          kubectl version --short --client
      #- name: delete coredns in worker nodes
      #  id: delete-coredns
      #  run: |
      #    kubectl patch deployment coredns -n kube-system --type json \
      #    -p='[{"op": "remove", "path": "/spec/template/metadata/annotations/eks.amazonaws.com~1compute-type"}]'
      - name: Check if role exists
        id: check-node-role
        run: |
          aws iam get-role --role-name AmazonEKSNodeRole > /dev/null 2>&1 || echo "::set-output name=exists::false"
      - name: create node role
        id: create-iam-node-role
        if: steps.check-node-role.outputs.exists == 'false'
        run: |
          aws iam create-role \
            --role-name AmazonEKSNodeRole \
            --assume-role-policy-document file://"config/eks/node-role-trust-relationship.json"

          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy \
            --role-name AmazonEKSNodeRole
          aws iam attach-role-policy \
            --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly \
            --role-name AmazonEKSNodeRole
      - name: create managed node group
        id: create-managed-node-group
        run: |
          aws eks update-kubeconfig --region us-east-1 --name eks-cluster
          cat config/eks/amazon-eks-managedNodeGroups.yaml | envsubst > amazon-eks-managedNodeGroups.yaml
          cat amazon-eks-managedNodeGroups.yaml
          eksctl create nodegroup --config-file=amazon-eks-managedNodeGroups.yaml
          kubectl get all -A
      #- name: create fargate profile
      #  id: create-fargate-profile
      #  run: |
      #    cat config/fargate-eks-cluster.yaml | envsubst '${{ secrets.AWS_ACCOUNT_ID }}' > fargate-eks-cluster.yaml
      #    eksctl create fargateprofile -f fargate-eks-cluster.yaml