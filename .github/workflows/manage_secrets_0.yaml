name: Step 0 - Manage secrets

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      #keypair:
      #  description: 'SSH Key Pair'
      #  required: true

env:
  AWS_REGION : ${{ github.event.inputs.region}} #Change to reflect your Region
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: 'eks-cluster'
  ACK_K8S_NAMESPACE: "ack-system-k8s"

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  secrets_aws:
    name: Manage secrets
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/secretAdmin
          role-session-name: secretAdmin
          aws-region: ${{ github.event.inputs.region}}
      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      #- name: Allow passwordless sudo
      #  run: echo '${{ secrets.SUDO_PASSWORD }}' | sudo -Sv
      - name: install envsubst
        id: install-envsubst
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
          chmod +x envsubst
          sudo mv envsubst /usr/local/bin
      - name: check Secrets if exist (rds)
        id: check-secrets-rds
        run: |
          secretExist=$(aws secretsmanager describe-secret --secret-id rds-secret)
          
          if [ -n "$secretExists" ]; then
              echo "Secret exists in AWS Secrets Manager. Skipping next step..."
              echo "::set-output name=exists::true"
          else
              echo "Secret does not exist in AWS Secrets Manager."
              echo "::set-output name=exists::false"
          fi
      - name: Create Secrets in AWS Secrets Manager
        id: create-secrets-asm-rds
        if: steps.check-secrets-rds.outputs.exists == 'false'
        run: |
          export RDS_SECRET=rds-secret
          
          aws secretsmanager create-secret --name $RDS_SECRET --secret-string '{"username":"admin","password":"${{secrets.KUBEFLOW_ADMIN}}","database":"kubeflow","host":"${{env.RDS_DB_INSTANCE_HOST}}","port":"${{env.RDS_DB_INSTANCE_PORT}}"}' --region ${{env.AWS_REGION}}
          yq e -i '.spec.parameters.objects |= sub("rds-secret",env(RDS_SECRET))' config/ack/resources/rds/secret-provider.yaml
      - name: check Secrets if exist (s3)
        id: check-secrets-s3
        run: |
          secretExist=$(aws secretsmanager describe-secret --secret-id s3-secret)
          
          if [ -n "$secretExists" ]; then
            echo "Secret exists in AWS Secrets Manager. Skipping next step..."
            echo "::set-output name=exists::true"
          else
            echo "Secret does not exist in AWS Secrets Manager."
            echo "::set-output name=exists::false"
          fi
      - name: Create Secrets in AWS Secrets Manager
        id: create-secrets-asm-s3
        if: steps.check-secrets-s3.outputs.exists == 'false'
        run: |
          export S3_SECRET=s3-secret
          export MINIO_AWS_ACCESS_KEY_ID=${{ secrets.IAC_EKS_ACCESS_KEY }}
          export MINIO_AWS_SECRET_ACCESS_KEY=${{ secrets.IAC_EKS_SECRET_KEY }}
          
          aws secretsmanager create-secret --name $S3_SECRET --secret-string '{"accesskey":"'$MINIO_AWS_ACCESS_KEY_ID'","secretkey":"'$MINIO_AWS_SECRET_ACCESS_KEY'"}' --region ${{env.AWS_REGION}}
          yq e -i '.spec.parameters.objects |= sub("s3-secret",env(S3_SECRET))' config/ack/resources/s3/secret-provider.yaml
            
